package com.example.system4;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;

import java.io.IOException;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.net.URL;
import javafx.event.ActionEvent;
import javafx.scene.control.Alert;
import javafx.stage.Stage;

import java.util.ResourceBundle;
import javafx.scene.Node;
import java.util.logging.Logger;

public class AddSupplier implements Initializable {

    @FXML
    private Label userIdLabel;

    @FXML
    private TextField Birthdate;

    @FXML
    private TextField CompanyName;

    @FXML
    private TextField Contactnumber;

    @FXML
    private TextField SupplierId;

    @FXML
    private TextField SupplierName;

    @FXML
    private TextField Reorderpoint;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        SupplierId.setText(Sidgenerate());
    }

    private static final Logger logger = Logger.getLogger(Main.class.getName());

    public void setUserData(String idstr) {
        userIdLabel.setText(idstr);
    }

    @FXML
    public void save(ActionEvent event){
        String supplierId = Sidgenerate();
        String companyName = CompanyName.getText();
        String supplierName = SupplierName.getText();
        String birthdate = Birthdate.getText();
        String contactnum = Contactnumber.getText();
        //Integer reorderpoint = Integer.valueOf(Reorderpoint.getText());
        String orderpoint = Reorderpoint.getText();
        boolean successful = AddSupplier(supplierId, companyName, supplierName, birthdate, contactnum, orderpoint);

        if(successful){
            Alert success = new Alert(Alert.AlertType.INFORMATION);
            success.setTitle("SUPPLIER ADDITION STATUS");
            success.setHeaderText(null);
            success.setContentText("Supplier Added Successfully!");
            success.showAndWait();
        } else {
            Alert failed = new Alert(Alert.AlertType.ERROR);
            failed.setTitle("SUPPLIER ADDITION STATUS");
            failed.setHeaderText(null);
            failed.setContentText("Supplier Addition Unsuccessful!");
            failed.showAndWait();
        }

        clearInputfields();
    }

    @FXML
    public String Sidgenerate() {
        //int maxId = 1000;
        int maxId = getSupplierId() + 1;
        return "S-" + maxId;
    }

    @FXML
    public int getSupplierId() {
        String url = "jdbc:mysql://localhost:3306/booksales";
        DatabaseInformation data = new DatabaseInformation();
        int maxId = 1000;

        String sql = "SELECT MAX(CAST(SUBSTRING_INDEX(`supplier_id`, '-', -1) AS UNSIGNED)) FROM booksales.add_supplier";

        try (Connection conn = DriverManager.getConnection(url, data.user, data.password);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {
            if (rs.next()) {
                int retrieved = rs.getInt(1);
                if (retrieved > maxId) {
                    maxId = retrieved;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return maxId;
    }

    @FXML
    private boolean AddSupplier( String supplierId, String companyName, String supplierName, String birthdate, String contactnum, String reorderpoint) {
        String url = "jdbc:mysql://localhost:3306/booksales";
        DatabaseInformation data = new DatabaseInformation();

        int intorderpoint = Integer.parseInt(reorderpoint);
        String sql = "INSERT INTO booksales.add_supplier (`supplier_id`, `company name`, `representative name`, `Birthdate`, `contact number`, `TimeStamp`, `Re-order point`) VALUES (?,?,?,?,?,?,?)";

        try (Connection conn = DriverManager.getConnection(url, data.user, data.password);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, supplierId);
            pstmt.setString(2, companyName);
            pstmt.setString(3, supplierName);
            pstmt.setString(4, birthdate);
            pstmt.setString(5, contactnum);
            pstmt.setString(6, LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
            pstmt.setInt(7, intorderpoint);
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Added Successfully");
            } else {
                System.out.println("Unsuccessfull Added Supplier");
            }
            return true; // Indicate successful addition
        } catch (SQLException e) {
            e.printStackTrace();
            return false; // Indicate failed addition
        }
    }

    public void clearInputfields(){
        CompanyName.clear();
        SupplierName.clear();
        Birthdate.clear();
        Contactnumber.clear();
        Reorderpoint.clear();
    }

    public void adminInfo(ActionEvent event) {
        String idstr = userIdLabel.getText();
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("UserInfo.fxml"));
            Parent root = loader.load();

            UserInfo controller = loader.getController();

            controller.setUserData(idstr);

            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            logger.severe("Error occurred during opening adminInfo " + e.getMessage());
        }
    }

    public void BackDashboard(ActionEvent event) {
        String idstr = userIdLabel.getText();

        String url = "jdbc:mysql://127.0.0.1:3306/signup_schema";
        DatabaseInformation data = new DatabaseInformation();

        try (Connection connection = DriverManager.getConnection(url, data.user, data.password)) {
            String userid = "SELECT * FROM users WHERE userid = ?";

            PreparedStatement selectionStatement = connection.prepareStatement(userid);
            selectionStatement.setString(1, idstr);
            ResultSet result = selectionStatement.executeQuery();

            while (result.next()) {
                String storedUserType = result.getString("user_type");
                if (storedUserType.equals("Admin")) {
                    BackDashboardAdmin(event);
                } else if (storedUserType.equals("Staff")) {
                    BackDashboardStaff(event);
                }
            }
        } catch (SQLException e) {
            logger.severe("Error occurred during Selection" + e.getMessage());
        }
    }

    @FXML
    public void BackDashboardAdmin(ActionEvent event) {
        String idstr = userIdLabel.getText();
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("AdminHomePage.fxml"));
            Parent root = loader.load();

            // Get the controller instance of adminHomePageController
            AdminHomePage controller = loader.getController();

            // Pass user data back to adminHomePageController
            controller.setUserData(idstr);

            // Show the adminHomePage scene
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            logger.severe("Error loading AdminHomePage.fxml: " + e.getMessage());
        }
    }

    @FXML
    public void BackDashboardStaff(ActionEvent event) {
        String idstr = userIdLabel.getText();
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("StaffHomePage.fxml"));
            Parent root = loader.load();

            // Get the controller instance of adminHomePageController
            StaffHomePage controller = loader.getController();

            // Pass user data back to adminHomePageController
            controller.setUserData(idstr);

            // Show the adminHomePage scene
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            logger.severe("Error loading StaffHomePage.fxml: " + e.getMessage());
        }
    }

    public void viewSupplierInfo(ActionEvent event) {
        String idstr = userIdLabel.getText();
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("ViewSupplier.fxml"));
            Parent root = loader.load();

            ViewSuppliers controller = loader.getController();

            controller.setUserData(idstr);

            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            logger.severe("Error occurred during opening adminInfo " + e.getMessage());
        }
    }

    public void openUpdateSupplier(ActionEvent event) {
        String idstr = userIdLabel.getText();
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("UpdateSupplier.fxml"));
            Parent root = loader.load();

            UpdateSupplier controller = loader.getController();

            controller.setUserData(idstr);

            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
