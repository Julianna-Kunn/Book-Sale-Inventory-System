package com.example.system4;

import com.mysql.cj.protocol.Resultset;
import javafx.collections.FXCollections;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.TextField;

import java.io.IOException;
import java.sql.*;

import javafx.collections.ObservableList;
import javafx.stage.Stage;

import javax.swing.text.View;
import java.sql.ResultSet;


import java.sql.Connection;
import java.util.logging.Logger;

//VIEW BOOKS SA BUYER PHASE

public class ViewSuppliers {
    private static final Logger logger = Logger.getLogger(ViewBooks.class.getName());

    @FXML
    private Label userIdLabel;

    @FXML
    private TableColumn<ViewSupplierInformation, String> VBirthdate;

    @FXML
    private TableColumn<ViewSupplierInformation, String> VCompany;

    @FXML
    private TableColumn<ViewSupplierInformation, String> VContact;

    @FXML
    private TableColumn<ViewSupplierInformation, String> VSupplierId;

    @FXML
    private TableColumn<ViewSupplierInformation, String> VSupplierName;

    @FXML
    private TableColumn<ViewSupplierInformation, String> VTimestamp;

    @FXML
    private TableView<ViewSupplierInformation> ViewSupplierTable;

    @FXML
    private TableColumn<ViewSupplierInformation, Integer> VReorderpoint;

    @FXML
    private TextField Search;

    ObservableList<ViewSupplierInformation> SearchObservableList = FXCollections.observableArrayList();

    int index = -1;

    Connection connect = null;
    Resultset rs = null;
    PreparedStatement pstmt = null;

    public void setUserData(String idstr) { userIdLabel.setText(idstr);
    }

    @FXML
    public void initialize() {
        VSupplierId.setCellValueFactory(new PropertyValueFactory<ViewSupplierInformation, String>("supplierID"));
        VCompany.setCellValueFactory(new PropertyValueFactory<ViewSupplierInformation, String>("companyName"));
        VSupplierName.setCellValueFactory(new PropertyValueFactory<ViewSupplierInformation, String>("supplierName"));
        VBirthdate.setCellValueFactory(new PropertyValueFactory<ViewSupplierInformation, String>("birthdate"));
        VContact.setCellValueFactory(new PropertyValueFactory<ViewSupplierInformation, String>("contactnum"));
        VTimestamp.setCellValueFactory(new PropertyValueFactory<ViewSupplierInformation, String>("timestamp"));
        VReorderpoint.setCellValueFactory(new PropertyValueFactory<ViewSupplierInformation, Integer>("Reorderpoint"));



        loadDataFromDatabase();
        ObservableList<ViewSupplierInformation> data = SupplierSQLConnector.getData();
        SearchObservableList.addAll(data);

        FilteredList<ViewSupplierInformation> filteredData = new FilteredList<>(SearchObservableList, b -> true);

        Search.textProperty().addListener((observable, oldValue, newValue) -> filteredData.setPredicate(SupplierInfo -> {
            if (newValue == null || newValue.trim().isEmpty()) {
                return true; // Show all data if search text is empty
            }

            String search = newValue.trim().toLowerCase();

            return SupplierInfo.getSupplierID().toLowerCase().contains(search) ||
                    SupplierInfo.getContactnum().toLowerCase().contains(search) ||
                    SupplierInfo.getCompanyName().toLowerCase().contains(search) ||
                    SupplierInfo.getSupplierName().toLowerCase().contains(search) ||
                    SupplierInfo.getBirthdate().toLowerCase().contains(search);
        }));

        SortedList<ViewSupplierInformation> sortedData = new SortedList<>(filteredData);
        sortedData.comparatorProperty().bind(ViewSupplierTable.comparatorProperty());
        System.out.println("Size of the list: " + data.size());
        ViewSupplierTable.setItems(sortedData);
        ViewSupplierTable.refresh();
    }

    @FXML
    private void loadDataFromDatabase() {
        String url = "jdbc:mysql://localhost:3306/booksales";
        DatabaseInformation data = new DatabaseInformation();

        String sql = "SELECT `supplier_id`, `company name`, `representative name`, `Birthdate`, `contact number`, `TimeStamp`, Re-order point FROM booksales.add_supplier";

        ObservableList<ViewSupplierInformation> supplierList = FXCollections.observableArrayList();

        try (Connection conn = DriverManager.getConnection(url, data.user, data.password);
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery();) {
            // Clear existing items in the TableView
            ViewSupplierTable.getItems().clear();

            // Iterate through the ResultSet and populate the TableView
            while (rs.next()) {
                ViewSupplierInformation dataa = new ViewSupplierInformation(
                        rs.getString("supplier_id"),
                        rs.getString("company name"),
                        rs.getString("supplier name"),
                        rs.getString("Birthdate"),
                        rs.getString("contact number"),
                        rs.getString("TimeStamp"),
                        rs.getInt("Re-order point")

                );
                supplierList.add(dataa);
            }
        } catch (SQLException e) {
            logger.severe("Error loading MainInterface.fxml: " + e.getMessage());
        }
    }

    public void BackDashboard(ActionEvent event) {
        String idstr = userIdLabel.getText();

        String url = "jdbc:mysql://127.0.0.1:3306/signup_schema";
        DatabaseInformation data = new DatabaseInformation();

        try (Connection connection = DriverManager.getConnection(url, data.user, data.password)) {
            String userid = "SELECT * FROM users WHERE userid = ?";

            PreparedStatement selectionStatement = connection.prepareStatement(userid);
            selectionStatement.setString(1, idstr);
            ResultSet result = selectionStatement.executeQuery();

            while (result.next()) {
                String storedUserType = result.getString("user_type");
                if (storedUserType.equals("Admin")) {
                    BackDashboardAdmin(event);
                } else if (storedUserType.equals("Staff")) {
                    BackDashboardStaff(event);
                }
            }
        } catch (SQLException e) {
            logger.severe("Error occurred during Selection" + e.getMessage());
        }
    }

    @FXML
    public void BackDashboardAdmin(ActionEvent event) {
        String idstr = userIdLabel.getText();
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("AdminHomePage.fxml"));
            Parent root = loader.load();

            // Get the controller instance of adminHomePageController
            AdminHomePage controller = loader.getController();

            // Pass user data back to adminHomePageController
            controller.setUserData(idstr);

            // Show the adminHomePage scene
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            logger.severe("Error loading AdminHomePage.fxml: " + e.getMessage());
        }
    }

    @FXML
    public void BackDashboardStaff(ActionEvent event) {
        String idstr = userIdLabel.getText();
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("StaffHomePage.fxml"));
            Parent root = loader.load();

            // Get the controller instance of adminHomePageController
            StaffHomePage controller = loader.getController();

            // Pass user data back to adminHomePageController
            controller.setUserData(idstr);

            // Show the adminHomePage scene
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            logger.severe("Error loading StaffHomePage.fxml: " + e.getMessage());
        }
    }

    @FXML
    public void backToAddSupplier(ActionEvent event) {
        String idstr = userIdLabel.getText();
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("AddSupplier.fxml"));
            Parent root = loader.load();

            // Get the controller instance of adminHomePageController
            AddSupplier controller = loader.getController();

            // Pass user data back to adminHomePageController
            controller.setUserData(idstr);

            // Show the adminHomePage scene
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            logger.severe("Error loading AdminHomePage.fxml: " + e.getMessage());
        }
    }

    public void adminInfo(ActionEvent event) {
        String idstr = userIdLabel.getText();
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("UserInfo.fxml"));
            Parent root = loader.load();

            UserInfo controller = loader.getController();

            controller.setUserData(idstr);

            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            logger.severe("Error occurred during opening adminInfo " + e.getMessage());
        }
    }

    @FXML
    public void updateSuppliers(ActionEvent event) {
        String idstr = userIdLabel.getText();
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("UpdateSupplier.fxml"));
            Parent root = loader.load();

            UpdateSupplier controller = loader.getController();

            controller.setUserData(idstr);

            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            logger.severe("Error occurred during opening UpdateSupplier" + e.getMessage());
        }
    }
}
